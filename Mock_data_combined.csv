Code Chunck,# of defects (optional),Indicator,Failure type FunctionalCodeCosmetic,Revised Code,
"assert sum([1, 2, 3]) == 6,",,0,,,
"assert sum([1, 1, 1]) == 6,",Summation has not done prorperly,1,AssertionError: Should be 3,"assert sum([1, 1, 1]) == 3,",
"def test_sum():
    assert sum([1, 2, 3]) == 6, ""Should be 6""

if __name__ == ""__main__"":
    test_sum()
    print(""Everything passed"")",,0,,,indicator 0 Pass or 1 Fail
"def test_sum():
    assert sum([1, 2, 3]) == 6, ""Should be 6""

def test_sum_tuple():
    assert sum((1, 2, 2)) == 6, ""Should be 6""

if __name__ == ""__main__"":
    test_sum()
    test_sum_tuple()
    print(""Everything passed"")",Summation defects,1,"Traceback (most recent call last):
  File ""test_summ.py"", line 9, in <module>
    test_sum_tuple()
  File ""test_summ.py"", line 5, in test_sum_tuple
    assert sum((1, 2, 2)) == 6, ""Should be 6""
AssertionError: Should be 6","def test_sum():
    assert sum([1, 2, 3]) == 6

def test_sum_tuple():
    assert sum((1, 2, 3)) == 6 

if __name__ == ""__main__"":
    test_sum()
    test_sum_tuple()
    print(""Everything passed"")",
"def is_A_student(score):
    return score > 75

over_75 = list(filter(is_A_student, scores))

print(over_75)",Missing variable,1,"NameError: name 'scores' is not defined
","scores = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65]

def is_A_student(score):
    return score > 75

over_75 = list(filter(is_A_student, scores))

print(over_75)",
"my_strings = ['a', 'b', 'c', 'd', 'e']
my_numbers = [1,2,3,4,5]

results = list(map(lambda x, y: (x, y), my_strings,))

print(results)",iterable need for mapping,1,missing 1 required positional argument: 'y',"my_strings = ['a', 'b', 'c', 'd', 'e']
my_numbers = [1,2,3,4,5]

results = list(map(lambda x, y: (x, y), my_strings, my_numbers))

print(results)",
"numbers = [3, 4, 6, 9, 34, 12]

def custom_sum(first, second):
    return first + second

result = reduce(custom_sum, numbers, 10)
print(result)",package needed,1,need to import reduce ,"from functools import reduce

numbers = [3, 4, 6, 9, 34, 12]

def custom_sum(first, second):
    return first + second

result = reduce(custom_sum, numbers, 10)
print(result)",
"def function(a):
    pass

function(0, a=0)",function has not used appropriate way,1,function() got multiple values for argument 'a',"def function(a):
    pass

function(a=0)",
"def function(a):
    pass

function(a=0)",,0,,,
"assert sum([1, 1, 1]) == 3,",,0,,,
"def test_sum():
    assert sum([1, 2, 3]) == 6

def test_sum_tuple():
    assert sum((1, 2, 3)) == 6 

if __name__ == ""__main__"":
    test_sum()
    test_sum_tuple()
    print(""Everything passed"")",,0,,,
"scores = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65]

def is_A_student(score):
    return score > 75

over_75 = list(filter(is_A_student, scores))

print(over_75)",,0,,,
"my_strings = ['a', 'b', 'c', 'd', 'e']
my_numbers = [1,2,3,4,5]

results = list(map(lambda x, y: (x, y), my_strings, my_numbers))

print(results)",,0,,,
"from functools import reduce

numbers = [3, 4, 6, 9, 34, 12]

def custom_sum(first, second):
    return first + second

result = reduce(custom_sum, numbers, 10)
print(result)",,0,,,
"def add_test(a,b):
    if b > a:
        return b
else:
        return a
add_test(43,25)",indentation is not fit in code,1,invalid synyax,"def add_test(a,b):
    if b > a:
        return b
    else:
        return a
add_test(43,25)",
"def add_test(a,b):
    if b > a:
        return b
    else:
        return a
add_test(43,25)",,0,,,
"def add_test(a,b):
    if b > a:
        return b
    else:
        
add_test(43,25)",indented  block shuld not empty,1,expected an indented block,"def add_test(a,b):
    if b > a:
        return b
    else:
        return a
add_test(43,25)",
"def add_test(a,b):
    if b > a:
        return b
    elif a=b:
        return ""a and b is equal""
add_test(25,25)",assignment has not done properly,1,invalid syntax,"def add_test(a,b):
    if b > a:
        return b
    elif a==b:
        return ""a and b is equal""
add_test(25,25)",
"def add_test(a,b):
    if b > a:
        return b
    elif a==b:
        return ""a and b is equal""
add_test(25,25)",,0,,,
"thislist = ""apple"", ""banana"", ""cherry"", ""apple"", ""cherry""
print(listt(thislist))",listt does not convert tuple into list,1,name 'listt' is not defined,"thislist = ""apple"", ""banana"", ""cherry"", ""apple"", ""cherry""
print(list(thislist))",
"thislist = ""apple"", ""banana"", ""cherry"", ""apple"", ""cherry""
print(list(thislist))",,0,,,
"txt = ""The best things in life are free!""
if ""free"" is txt:
  print(""Yes, 'free' is present."")",is does not find presence of text in string,1,ues in instead of is,"txt = ""The best things in life are free!""
if ""free"" in txt:
  print(""Yes, 'free' is present."")",
"txt = ""The best things in life are free!""
if ""free"" in txt:
  print(""Yes, 'free' is present."")",,0,,,
"quantity = 3
itemno = 567
price = 49.95
myorder = ""I want {} pieces of item {} for {} dollars.""
print(myorder.format(quantity, price))",missed one parameter in format,1,tuple index out of range,"quantity = 3
itemno = 567
price = 49.95
myorder = ""I want {} pieces of item {} for {} dollars.""
print(myorder.format(quantity, itemno, price))",
"quantity = 3
itemno = 567
price = 49.95
myorder = ""I want {} pieces of item {} for {} dollars.""
print(myorder.format(quantity, itemno, price))",,0,,,
"mytuple = (""apple"", ""banana"", ""cherry"")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))",trying to get more iterator object than given ,1,StopIteration: ,"mytuple = (""apple"", ""banana"", ""cherry"")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))",
"mytuple = (""apple"", ""banana"", ""cherry"")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))",,0,,,
"x = 30
def myfunc():
    x=x
    def myinnerfunc():
        print(x)
    myinnerfunc()

myfunc()",not defined proprly In scope,1,local variable 'x' referenced before assignment,"def myfunc():
    x = 30
    def myinnerfunc():
        print(x)
    myinnerfunc()

myfunc()",
"def myfunc():
    x = 30
    def myinnerfunc():
        print(x)
    myinnerfunc()

myfunc()",,0,,,
"x = lambda a : a+15
print(x(5))",,0,,,
"x = lambda a , a+15
print(x(5))",expect : in lambda function,1,syntax error in lambda function,"x = lambda a : a+15
print(x(5))",
"import datetime

x = datetime.datetime(2020, 17)

print(x)",month is needed in datetime constructor,1,function missing required argument 'day' (pos 3),"import datetime

x = datetime.datetime(2020, 5, 17)

print(x)",
"import datetime

x = datetime.datetime(2020, 5, 17)

print(x)",,0,,,
"import json

# some JSON:
x =  '{ ""name"":""John"", ""age"":30, ""city"":""New York""}'

# parse x:
y = json.loads()

# the result is a Python dictionary:
print(y[""age""])",parsing can not be done,1,loads() missing 1 required positional argument,"import json

# some JSON:
x =  '{ ""name"":""John"", ""age"":30, ""city"":""New York""}'

# parse x:
y = json.loads(x)

# the result is a Python dictionary:
print(y[""age""])",
"import json

# some JSON:
x =  '{ ""name"":""John"", ""age"":30, ""city"":""New York""}'

# parse x:
y = json.loads(x)

# the result is a Python dictionary:
print(y[""age""])",,0,,,
"import json

# a Python object (dict):
x = {
  ""name"": ""John"",
  ""age"": 30,
  ""city"": ""New York""
}

# convert into JSON:
y = dumps(x)

# the result is a JSON string:
print(y)",json.dumps() is the right way to call ,1,name error dumps,"import json

# a Python object (dict):
x = {
  ""name"": ""John"",
  ""age"": 30,
  ""city"": ""New York""
}

# convert into JSON:
y = json.dumps(x)

# the result is a JSON string:
print(y)",
"import json

# a Python object (dict):
x = {
  ""name"": ""John"",
  ""age"": 30,
  ""city"": ""New York""
}

# convert into JSON:
y = json.dumps(x)

# the result is a JSON string:
print(y)",,0,,,
"import matplotlib.pyplot as plt
%matplotlib inline
x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

plt.scatter(x, y)
plt.show()",,0,,,
"import matplotlib.pyplot as plt
%matplotlib inline
x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88]

plt.scatter(x, y)
plt.show()",x and y is not in same size,1,x and y must be the same size,"import matplotlib.pyplot as plt
%matplotlib inline
x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

plt.scatter(x, y)
plt.show()",
"import matplotlib.pyplot as plt
from scipy import stats

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x, y)

def myfunc(x):
    return slope * x + intercept

mymodel = list(map(myfunc))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()",map must have iterable,1,map() must have at least two arguments,"import matplotlib.pyplot as plt
from scipy import stats

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x, y)

def myfunc(x):
    return slope * x + intercept

mymodel = list(map(myfunc, x))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()",
"import matplotlib.pyplot as plt
from scipy import stats

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x, y)

def myfunc(x):
    return slope * x + intercept

mymodel = list(map(myfunc, x))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()",,0,,,
"import matplotlib.pyplot as plt

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x, y)

def myfunc(x):
    return slope * x + intercept

mymodel = list(map(myfunc, x))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()",stats is scipy package import needed ,1,name error stats,"import matplotlib.pyplot as plt
from scipy import stats

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x, y)

def myfunc(x):
    return slope * x + intercept

mymodel = list(map(myfunc, x))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()",
"import matplotlib.pyplot as plt
from scipy import stats

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x)

def myfunc(x):
    return slope * x + intercept

mymodel = list(map(myfunc, x))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()",tuple index out of range ,1,tuple index out of range ,"import matplotlib.pyplot as plt
from scipy import stats

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x, y)

def myfunc(x):
    return slope * x + intercept

mymodel = list(map(myfunc, x))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()",
"import numpy
import matplotlib.pyplot as plt
%matplotlib inline
numpy.random.seed(100)

x = numpy.random.normal(3, 1, 100)
y = numpy.random.normal(150, 40, 100)  

plt.scatter(x, y)
plt.show()",,0,,,
"import numpy
import matplotlib.pyplot as plt
%matplotlib inline
numpy.random.seed(100)

x = numpy.random(3, 1, 100)
y = numpy.random.normal(150, 40, 100)  

plt.scatter(x, y)
plt.show()",module object is not callable,1,module' object is not callable,"import numpy
import matplotlib.pyplot as plt
%matplotlib inline
numpy.random.seed(100)

x = numpy.random.normal(3, 1, 100)
y = numpy.random.normal(150, 40, 100)  

plt.scatter(x, y)
plt.show()",
"import numpy
import matplotlib.pyplot as plt
numpy.random.seed(2)

x = numpy.random.normal(3, 1, 100)
y = numpy.random.normal(150, 40, 100) / x

train_x = x[:80]
train_y = y[:80]

test_x = x[80:]
test_y = y[80:]

mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))

myline = numpy.linspace(0, 6, 100)

plt.scatter(train_x, train_y)
plt.plot(myline, mymodel(myline))
plt.show()",,0,,,
"import numpy
import matplotlib.pyplot as plt
numpy.random.seed(2)

x = numpy.random.normal(3, 1, 100)
y = numpy.random.normal(150, 40, 100) / x

train_x = x[:80]
train_y = y[:80]

test_x = x[80:]
test_y = y[80:]

mymodel = numpy.poly1d(numpy.polyfit(train_x, 4))

myline = numpy.linspace(0, 6, 100)

plt.scatter(train_x, train_y)
plt.plot(myline, mymodel(myline))
plt.show()",plyfit can take x and y ,1,polyfit() required positional argument: 'deg',"import numpy
import matplotlib.pyplot as plt
numpy.random.seed(2)

x = numpy.random.normal(3, 1, 100)
y = numpy.random.normal(150, 40, 100) / x

train_x = x[:80]
train_y = y[:80]

test_x = x[80:]
test_y = y[80:]

mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))

myline = numpy.linspace(0, 6, 100)

plt.scatter(train_x, train_y)
plt.plot(myline, mymodel(myline))
plt.show()",
"import numpy
import matplotlib.pyplot as plt
numpy.random.seed(2)

x = numpy.random.normal(3, 1, 100)
y = numpy.random.normal(150, 40, 100) / x


mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))

myline = numpy.linspace(0, 6, 100)

plt.scatter(train_x, train_y)
plt.plot(myline, mymodel(myline))
plt.show()",train data is required to train the model,1,name 'train_x' is not defined,"import numpy
import matplotlib.pyplot as plt
numpy.random.seed(2)

x = numpy.random.normal(3, 1, 100)
y = numpy.random.normal(150, 40, 100) / x

train_x = x[:80]
train_y = y[:80]

test_x = x[80:]
test_y = y[80:]

mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))

myline = numpy.linspace(0, 6, 100)

plt.scatter(train_x, train_y)
plt.plot(myline, mymodel(myline))
plt.show()",
"import numpy

speed = [99,86,87,88,111,86,103,87,94,78,77,85,86]

x = median(speed)

print(x)",median is not defined ,1,NameError: name 'median' is not defined,"import numpy

speed = [99,86,87,88,111,86,103,87,94,78,77,85,86]

x = numpy.median(speed)

print(x)",
"import numpy

speed = [99,86,87,88,111,86,103,87,94,78,77,85,86]

x = numpy.median(speed)

print(x)",,0,,,
